generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  userType          UserType
  organizationName  String?
  walletBalance     Float    @default(0)
  reputationScore   Int      @default(0)
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  contributions     EscrowContribution[]
  questions         ValidationQuestion[]
  answers           UserAnswer[]
  ideas             InstitutionalIdea[]
  refunds           RefundTransaction[]
  earnings          EarningTransaction[]
}

model InstitutionalIdea {
  id                String     @id @default(cuid())
  title             String
  summary           String     @db.Text
  detailedPlan      String?    @db.Text
  sector            String?
  marketCap         String?
  status            IdeaStatus @default(QUEUED)
  totalEscrow       Float      @default(0)
  escrowRank        Int?
  isAIGenerated     Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relations
  createdBy         User?      @relation(fields: [createdById], references: [id])
  createdById       String?
  contributions     EscrowContribution[]
  questions         ValidationQuestion[]
  validations       IdeaValidation[]
}

model EscrowContribution {
  id                String   @id @default(cuid())
  amount            Float
  isRefundable      Boolean  @default(true)
  wasRefunded       Boolean  @default(false)
  refundDeadline    DateTime?
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  idea              InstitutionalIdea @relation(fields: [ideaId], references: [id])
  ideaId            String
  questionsFunded   ValidationQuestion[]
  refundTransaction RefundTransaction?
}

model ValidationQuestion {
  id                String   @id @default(cuid())
  text              String   @db.Text
  isTop3            Boolean  @default(false)
  questionSlot      Int?     // 1, 2, or 3 for top questions
  bidAmount         Float    @default(0)
  minAnswerScore    Float    @default(80) // Minimum score for valid answer
  hasValidAnswer    Boolean  @default(false)
  refundTriggered   Boolean  @default(false)
  createdAt         DateTime @default(now())
  
  // Relations
  idea              InstitutionalIdea @relation(fields: [ideaId], references: [id])
  ideaId            String
  submittedBy       User     @relation(fields: [submittedById], references: [id])
  submittedById     String
  escrowSource      EscrowContribution? @relation(fields: [escrowSourceId], references: [id])
  escrowSourceId    String?
  answers           UserAnswer[]
}

model UserAnswer {
  id                String   @id @default(cuid())
  content           String   @db.Text
  sources           String[] // Array of URLs/references
  aiValidationScore Float?
  manualReviewScore Float?
  finalScore        Float?
  payoutEarned      Float?
  isPaid            Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  question          ValidationQuestion @relation(fields: [questionId], references: [id])
  questionId        String
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  validations       AnswerValidation[]
  earningTransaction EarningTransaction?
}

model IdeaValidation {
  id                String   @id @default(cuid())
  vote              Int      // +1 or -1
  comment           String?  @db.Text
  createdAt         DateTime @default(now())
  
  // Relations
  idea              InstitutionalIdea @relation(fields: [ideaId], references: [id])
  ideaId            String
}

model AnswerValidation {
  id                String   @id @default(cuid())
  score             Float    // 0-100
  feedback          String?  @db.Text
  validationType    ValidationType
  createdAt         DateTime @default(now())
  
  // Relations
  answer            UserAnswer @relation(fields: [answerId], references: [id])
  answerId          String
}

model RefundTransaction {
  id                String   @id @default(cuid())
  amount            Float
  reason            String
  processedAt       DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  escrow            EscrowContribution @relation(fields: [escrowId], references: [id])
  escrowId          String   @unique
}

model EarningTransaction {
  id                String   @id @default(cuid())
  amount            Float
  status            TransactionStatus @default(PENDING)
  processedAt       DateTime?
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  answer            UserAnswer @relation(fields: [answerId], references: [id])
  answerId          String   @unique
}

// Enums
enum UserType {
  RETAIL
  INSTITUTIONAL
  ADMIN
}

enum IdeaStatus {
  QUEUED
  TOP_100
  ARCHIVED
  COMPLETED
}

enum ValidationType {
  AI_AUTOMATED
  PEER_REVIEW
  EXPERT_REVIEW
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
